import csv
import matplotlib.pyplot as plt
import pandas as pd
from collections import defaultdict
import re

# Set up matplotlib for better looking plots
plt.style.use('default')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

def parse_duration_seconds(duration_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∫—É–Ω–¥—ã.
    """
    try:
        if ':' not in duration_str:
            return 0
        parts = duration_str.split(':')
        if len(parts) == 2:  # MM:SS
            minutes, seconds = map(int, parts)
            return minutes * 60 + seconds
        elif len(parts) == 3:  # HH:MM:SS
            hours, minutes, seconds = map(int, parts)
            return hours * 3600 + minutes * 60 + seconds
        return 0
    except:
        return 0

def create_youtube_graphs():
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –∫–∞–Ω–∞–ª–æ–≤.
    """
    print("–°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –∫–∞–Ω–∞–ª–æ–≤...")
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–∞—Ö
        df = pd.read_csv('channel_analysis.csv', encoding='utf-8-sig')
        video_df = pd.read_csv('youtube_history_with_language.csv', encoding='utf-8-sig')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ
        plt.figure(figsize=(14, 8))
        
        top_channels = df.head(10)
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        colors = ['#FF6B6B' if 'Russian' in lang else '#4ECDC4' 
                 for lang in top_channels['–Ø–∑—ã–∫–∏']]
        
        bars = plt.bar(range(len(top_channels)), 
                      top_channels['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ'],
                      color=colors, alpha=0.8, edgecolor='black', linewidth=0.5)
        
        plt.title('üèÜ –¢–æ–ø 10 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('–ö–∞–Ω–∞–ª—ã', fontsize=12, fontweight='bold')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ', fontsize=12, fontweight='bold')
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        channel_names = [name[:20] + '...' if len(name) > 20 else name 
                        for name in top_channels['–ö–∞–Ω–∞–ª']]
        plt.xticks(range(len(top_channels)), channel_names, 
                  rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, bar in enumerate(bars):
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{int(height)}', ha='center', va='bottom', fontweight='bold')
        
        # –õ–µ–≥–µ–Ω–¥–∞
        from matplotlib.patches import Patch
        legend_elements = [Patch(facecolor='#FF6B6B', label='üá∑üá∫ –†—É—Å—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã'),
                          Patch(facecolor='#4ECDC4', label='üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã')]
        plt.legend(handles=legend_elements, loc='upper right')
        
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        plt.savefig('top_channels_by_count.png', dpi=300, bbox_inches='tight')
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ 'top_channels_by_count.png' —Å–æ–∑–¥–∞–Ω")
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        plt.figure(figsize=(14, 8))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df_by_time = df.sort_values('–û–±—â–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)', ascending=False)
        top_time = df_by_time.head(10)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã
        watch_time_hours = top_time['–û–±—â–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)'] / 3600
        
        colors_time = ['#FF6B6B' if 'Russian' in lang else '#4ECDC4' 
                      for lang in top_time['–Ø–∑—ã–∫–∏']]
        
        bars2 = plt.bar(range(len(top_time)), 
                       watch_time_hours,
                       color=colors_time, alpha=0.8, edgecolor='black', linewidth=0.5)
        
        plt.title('‚è∞ –¢–æ–ø 10 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('–ö–∞–Ω–∞–ª—ã', fontsize=12, fontweight='bold')
        plt.ylabel('–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—á–∞—Å—ã)', fontsize=12, fontweight='bold')
        
        channel_names_time = [name[:20] + '...' if len(name) > 20 else name 
                             for name in top_time['–ö–∞–Ω–∞–ª']]
        plt.xticks(range(len(top_time)), channel_names_time, 
                  rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)
        for i, bar in enumerate(bars2):
            height = bar.get_height()
            total_seconds = top_time.iloc[i]['–û–±—â–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)']
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            time_label = f"{hours}:{minutes:02d}"
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    time_label, ha='center', va='bottom', fontweight='bold')
        
        plt.legend(handles=legend_elements, loc='upper right')
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        plt.savefig('top_channels_by_time.png', dpi=300, bbox_inches='tight')
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ 'top_channels_by_time.png' —Å–æ–∑–¥–∞–Ω")
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º
        plt.figure(figsize=(10, 8))
        
        language_counts = video_df['Language'].value_counts()
        
        colors_pie = ['#FF6B6B', '#4ECDC4']
        labels = ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá∫üá∏ English']
        
        wedges, texts, autotexts = plt.pie(language_counts.values, 
                                          labels=labels,
                                          colors=colors_pie,
                                          autopct='%1.1f%%',
                                          startangle=90,
                                          explode=(0.05, 0.05),
                                          shadow=True)
        
        # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
            autotext.set_fontsize(12)
        
        for text in texts:
            text.set_fontsize(12)
            text.set_fontweight('bold')
        
        plt.title('üåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —è–∑—ã–∫–∞–º', 
                 fontsize=16, fontweight='bold', pad=20)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_videos = len(video_df)
        russian_count = language_counts.get('Russian', 0)
        english_count = language_counts.get('English', 0)
        
        stats_text = f"–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {total_videos}\nüá∑üá∫ –†—É—Å—Å–∫–∏–π: {russian_count}\nüá∫üá∏ English: {english_count}"
        plt.text(1.3, 0.5, stats_text, fontsize=11, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor='lightgray', alpha=0.8))
        
        plt.tight_layout()
        plt.savefig('language_distribution.png', dpi=300, bbox_inches='tight')
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ 'language_distribution.png' —Å–æ–∑–¥–∞–Ω")
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ —è–∑—ã–∫–∞–º
        plt.figure(figsize=(10, 8))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ —è–∑—ã–∫–∞–º
        total_time_by_language = {'Russian': 0, 'English': 0}
        
        for _, row in video_df.iterrows():
            language = row['Language']
            duration_str = row['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ']
            
            # –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥—ã
            try:
                if ':' in duration_str:
                    parts = duration_str.split(':')
                    if len(parts) == 2:  # MM:SS
                        minutes, seconds = map(int, parts)
                        total_seconds = minutes * 60 + seconds
                    elif len(parts) == 3:  # HH:MM:SS
                        hours, minutes, seconds = map(int, parts)
                        total_seconds = hours * 3600 + minutes * 60 + seconds
                    else:
                        total_seconds = 0
                else:
                    total_seconds = 0
            except:
                total_seconds = 0
            
            total_time_by_language[language] += total_seconds
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        russian_hours = total_time_by_language['Russian'] / 3600
        english_hours = total_time_by_language['English'] / 3600
        total_hours = russian_hours + english_hours
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è pie chart
        time_values = [total_time_by_language['Russian'], total_time_by_language['English']]
        time_labels = ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá∫üá∏ English']
        time_colors = ['#FF6B6B', '#4ECDC4']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        russian_percent = (total_time_by_language['Russian'] / sum(time_values)) * 100
        english_percent = (total_time_by_language['English'] / sum(time_values)) * 100
        
        wedges_time, texts_time, autotexts_time = plt.pie(time_values, 
                                                          labels=time_labels,
                                                          colors=time_colors,
                                                          autopct='%1.1f%%',
                                                          startangle=90,
                                                          explode=(0.05, 0.05),
                                                          shadow=True)
        
        # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç
        for autotext in autotexts_time:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
            autotext.set_fontsize(12)
        
        for text in texts_time:
            text.set_fontsize(12)
            text.set_fontweight('bold')
        
        plt.title('‚è±Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ —è–∑—ã–∫–∞–º', 
                 fontsize=16, fontweight='bold', pad=20)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        def format_time_display(seconds):
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            if hours > 0:
                return f"{hours}—á {minutes}–º"
            else:
                return f"{minutes}–º"
        
        russian_time_str = format_time_display(total_time_by_language['Russian'])
        english_time_str = format_time_display(total_time_by_language['English'])
        total_time_str = format_time_display(sum(time_values))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
        time_stats_text = f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time_str}\nüá∑üá∫ –†—É—Å—Å–∫–∏–π: {russian_time_str}\nüá∫üá∏ English: {english_time_str}"
        plt.text(1.3, 0.5, time_stats_text, fontsize=11, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor='lightblue', alpha=0.8))
        
        plt.tight_layout()
        plt.savefig('watch_time_by_language.png', dpi=300, bbox_inches='tight')
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ 'watch_time_by_language.png' —Å–æ–∑–¥–∞–Ω")
        plt.close()
        
        print(f"\nüéØ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã pandas –∏ matplotlib:")
        print("pip install pandas matplotlib")

if __name__ == "__main__":
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube ===\n")
    create_youtube_graphs() 