#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']

def parse_duration_to_seconds(duration_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥—ã"""
    try:
        if ':' in duration_str:
            parts = duration_str.split(':')
            if len(parts) == 2:  # MM:SS
                minutes, seconds = map(int, parts)
                return minutes * 60 + seconds
            elif len(parts) == 3:  # HH:MM:SS
                hours, minutes, seconds = map(int, parts)
                return hours * 3600 + minutes * 60 + seconds
        return 0
    except:
        return 0

def format_time_display(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    else:
        return f"{minutes}–º"

def main():
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º YouTube ===\n")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        df = pd.read_csv('youtube_history_with_categories.csv')
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å {len(df)} –≤–∏–¥–µ–æ")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª 'youtube_history_with_categories.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    df['Duration_Seconds'] = df['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ'].apply(parse_duration_to_seconds)
    
    # === –ì—Ä–∞—Ñ–∏–∫ 1: –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ ===
    plt.figure(figsize=(14, 8))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —è–∑—ã–∫–∞–º
    category_lang_counts = df.groupby(['Category', 'Language']).size().unstack(fill_value=0)
    category_totals = df['Category'].value_counts()
    top_categories = category_totals.head(8).index
    
    filtered_data = category_lang_counts.loc[top_categories]
    colors = {'Russian': '#FF6B6B', 'English': '#4ECDC4'}
    
    x = np.arange(len(top_categories))
    width = 0.6
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–∫–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    russian_counts = [filtered_data.loc[cat, 'Russian'] if 'Russian' in filtered_data.columns else 0 for cat in top_categories]
    english_counts = [filtered_data.loc[cat, 'English'] if 'English' in filtered_data.columns else 0 for cat in top_categories]
    
    bars1 = plt.bar(x, russian_counts, width, label='üá∑üá∫ –†—É—Å—Å–∫–∏–π', color=colors['Russian'], alpha=0.8)
    bars2 = plt.bar(x, english_counts, width, bottom=russian_counts, label='üá∫üá∏ English', color=colors['English'], alpha=0.8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (rus, eng) in enumerate(zip(russian_counts, english_counts)):
        total = rus + eng
        if rus > 0:
            plt.text(i, rus/2, str(rus), ha='center', va='center', fontweight='bold', color='white')
        if eng > 0:
            plt.text(i, rus + eng/2, str(eng), ha='center', va='center', fontweight='bold', color='white')
        plt.text(i, total + 0.3, str(total), ha='center', va='bottom', fontweight='bold', fontsize=11)
    
    plt.title('üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', fontsize=12, fontweight='bold')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ', fontsize=12, fontweight='bold')
    plt.xticks(x, top_categories, rotation=45, ha='right')
    plt.legend(fontsize=11)
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()
    plt.savefig('categories_by_video_count.png', dpi=300, bbox_inches='tight')
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ 'categories_by_video_count.png' —Å–æ–∑–¥–∞–Ω")
    plt.close()
    
    # === –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ===
    plt.figure(figsize=(14, 8))
    
    category_lang_time = df.groupby(['Category', 'Language'])['Duration_Seconds'].sum().unstack(fill_value=0)
    category_time_totals = df.groupby('Category')['Duration_Seconds'].sum().sort_values(ascending=False)
    top_time_categories = category_time_totals.head(8).index
    
    filtered_time_data = category_lang_time.loc[top_time_categories]
    x = np.arange(len(top_time_categories))
    
    # –í—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    russian_time = [filtered_time_data.loc[cat, 'Russian']/3600 if 'Russian' in filtered_time_data.columns else 0 for cat in top_time_categories]
    english_time = [filtered_time_data.loc[cat, 'English']/3600 if 'English' in filtered_time_data.columns else 0 for cat in top_time_categories]
    
    bars1 = plt.bar(x, russian_time, width, label='üá∑üá∫ –†—É—Å—Å–∫–∏–π', color=colors['Russian'], alpha=0.8)
    bars2 = plt.bar(x, english_time, width, bottom=russian_time, label='üá∫üá∏ English', color=colors['English'], alpha=0.8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (rus, eng) in enumerate(zip(russian_time, english_time)):
        total_seconds = category_time_totals[top_time_categories[i]]
        rus_seconds = filtered_time_data.loc[top_time_categories[i], 'Russian'] if 'Russian' in filtered_time_data.columns else 0
        eng_seconds = filtered_time_data.loc[top_time_categories[i], 'English'] if 'English' in filtered_time_data.columns else 0
        
        if rus > 0.1:
            plt.text(i, rus/2, format_time_display(rus_seconds), ha='center', va='center', 
                    fontweight='bold', color='white', fontsize=9)
        if eng > 0.1:
            plt.text(i, rus + eng/2, format_time_display(eng_seconds), ha='center', va='center', 
                    fontweight='bold', color='white', fontsize=9)
        
        total_time_str = format_time_display(total_seconds)
        plt.text(i, rus + eng + 0.1, total_time_str, ha='center', va='bottom', 
                fontweight='bold', fontsize=10)
    
    plt.title('‚è±Ô∏è –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', fontsize=12, fontweight='bold')
    plt.ylabel('–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—á–∞—Å—ã)', fontsize=12, fontweight='bold')
    plt.xticks(x, top_time_categories, rotation=45, ha='right')
    plt.legend(fontsize=11)
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()
    plt.savefig('categories_by_watch_time.png', dpi=300, bbox_inches='tight')
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ 'categories_by_watch_time.png' —Å–æ–∑–¥–∞–Ω")
    plt.close()
    
    # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    print("\nüé¨ –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ:")
    for category in top_categories:
        total = category_totals[category]
        rus_count = filtered_data.loc[category, 'Russian'] if 'Russian' in filtered_data.columns else 0
        eng_count = filtered_data.loc[category, 'English'] if 'English' in filtered_data.columns else 0
        print(f"   {category}: {total} –≤–∏–¥–µ–æ (üá∑üá∫ {rus_count} | üá∫üá∏ {eng_count})")
    
    print("\n‚è±Ô∏è –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    for category in top_time_categories:
        total_time = category_time_totals[category]
        rus_time = filtered_time_data.loc[category, 'Russian'] if 'Russian' in filtered_time_data.columns else 0
        eng_time = filtered_time_data.loc[category, 'English'] if 'English' in filtered_time_data.columns else 0
        
        total_str = format_time_display(total_time)
        rus_str = format_time_display(rus_time)
        eng_str = format_time_display(eng_time)
        
        print(f"   {category}: {total_str} (üá∑üá∫ {rus_str} | üá∫üá∏ {eng_str})")
    
    print(f"\nüéØ –ì—Ä–∞—Ñ–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

if __name__ == "__main__":
    main() 