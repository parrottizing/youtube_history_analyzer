#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import google.generativeai as genai
from dotenv import load_dotenv
import os
import time
from collections import defaultdict

def setup_gemini():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API"""
    load_dotenv()
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    genai.configure(api_key=api_key)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
    generation_config = {
        "temperature": 0,
        "top_p": 0.95,
        "top_k": 64,
        "max_output_tokens": 10,
    }
    
    model = genai.GenerativeModel(
        model_name="gemini-2.0-flash",
        generation_config=generation_config,
    )
    
    return model

def categorize_channel(model, channel_name, video_titles):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é Gemini AI - –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–¥–∞–µ–º—Å—è!"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    titles_text = "\n".join([f"- {title}" for title in video_titles])
    
    prompt = f"""Analyze this YouTube channel and its video titles. 

Channel Name: {channel_name}

Video Titles:
{titles_text}

Based on the channel name and video titles, categorize this channel into ONE of these categories ONLY:
AI, F1, Football, Basketball, News, Humor, Popular Science, History, Other

Answer with only ONE WORD from the list above. No explanation, no additional text.

Category:"""
    
    attempt = 0
    while True:  # –ù–ò–ö–û–ì–î–ê –ù–ï –°–î–ê–ï–ú–°–Ø!
        attempt += 1
        try:
            response = model.generate_content(prompt)
            category = response.text.strip().upper()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            valid_categories = ['AI', 'F1', 'FOOTBALL', 'BASKETBALL', 'NEWS', 'HUMOR', 'POPULAR SCIENCE', 'HISTORY', 'OTHER']
            
            if category in valid_categories:
                if attempt > 1:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å–ª–µ {attempt} –ø–æ–ø—ã—Ç–æ–∫")
                return category
            else:
                print(f"‚ö†Ô∏è  Gemini –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}' –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}'. –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                continue
                
        except Exception as e:
            if "429" in str(e):
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff –¥–ª—è rate limits
                wait_time = min(60 * (1.5 ** (attempt - 1)), 300)  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
                print(f"‚è≥ Rate limit error –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}'. –ñ–¥–µ–º {wait_time:.1f} —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                time.sleep(wait_time)
                continue
            elif "quota" in str(e).lower():
                # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç - –∂–¥–µ–º –¥–æ–ª—å—à–µ
                print(f"üí§ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API. –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º... (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                time.sleep(600)  # 10 –º–∏–Ω—É—Ç
                continue
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –∏ –ø–æ–≤—Ç–æ—Ä
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}': {e}. –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                time.sleep(10)
                continue

def main():
    print("=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Gemini AI ===\n")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
    try:
        model = setup_gemini()
        print("‚úÖ Gemini API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API: {e}")
        return
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        df = pd.read_csv('youtube_history_with_language.csv')
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å {len(df)} –≤–∏–¥–µ–æ")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª 'youtube_history_with_language.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
    channels_data = defaultdict(list)
    for _, row in df.iterrows():
        channel = row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞']
        title = row['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ']
        channels_data[channel].append(title)
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(channels_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    channel_categories = {}
    
    for i, (channel, titles) in enumerate(channels_data.items(), 1):
        print(f"üìù [{i}/{len(channels_data)}] –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ–º –∫–∞–Ω–∞–ª: {channel}")
        
        category = categorize_channel(model, channel, titles)
        channel_categories[channel] = category
        
        print(f"   ‚û°Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç 15 RPM –¥–ª—è Free Tier (4+ —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)
        time.sleep(4.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É DataFrame
    df['Category'] = df['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'].map(channel_categories)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = 'youtube_history_with_categories.csv'
    df.to_csv(output_file, index=False, encoding='utf-8-sig')
    
    print(f"\n‚úÖ –§–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    category_stats = df['Category'].value_counts()
    for category, count in category_stats.items():
        print(f"   {category}: {count} –≤–∏–¥–µ–æ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüè∑Ô∏è  –ö–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category in sorted(category_stats.index):
        channels_in_category = df[df['Category'] == category]['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'].unique()
        print(f"\n{category}:")
        for channel in sorted(channels_in_category):
            video_count = len(df[df['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'] == channel])
            print(f"   ‚Ä¢ {channel} ({video_count} –≤–∏–¥–µ–æ)")

if __name__ == "__main__":
    main() 