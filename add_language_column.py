import csv
import re

def detect_language(text):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        str: 'Russian' –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –∏–Ω–∞—á–µ 'English'
    """
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Ü–∏—Ñ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –±—É–∫–≤
    cleaned_text = re.sub(r'[^\w]', '', text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cyrillic_pattern = re.compile(r'[–∞-—è—ë]', re.IGNORECASE)
    
    if cyrillic_pattern.search(cleaned_text):
        return 'Russian'
    else:
        return 'English'

def add_language_column(input_file='youtube_history_clean.csv', output_file='youtube_history_with_language.csv'):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É 'Language' –≤ CSV —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π YouTube.
    
    Args:
        input_file (str): –ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞.
        output_file (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π —è–∑—ã–∫–∞.
    """
    print(f"–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{input_file}'...")
    
    try:
        updated_rows = []
        
        with open(input_file, 'r', encoding='utf-8-sig') as f:
            reader = csv.reader(f)
            header = next(reader)  # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            new_header = header + ['Language']
            updated_rows.append(new_header)
            
            print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {header}")
            print(f"–ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {new_header}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
            processed_count = 0
            russian_count = 0
            english_count = 0
            
            for row in reader:
                if len(row) >= 1:  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                    video_title = row[0]  # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                    language = detect_language(video_title)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –∫ —Å—Ç—Ä–æ–∫–µ
                    new_row = row + [language]
                    updated_rows.append(new_row)
                    
                    # –í–µ–¥–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    processed_count += 1
                    if language == 'Russian':
                        russian_count += 1
                    else:
                        english_count += 1
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
                    if processed_count <= 5:
                        print(f"  {processed_count}. '{video_title[:50]}...' -> {language}")
                
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∑–∞–ø–∏—Å–µ–π:")
        print(f"  –†—É—Å—Å–∫–∏—Ö –≤–∏–¥–µ–æ: {russian_count}")
        print(f"  –ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö –≤–∏–¥–µ–æ: {english_count}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        with open(output_file, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)
            writer.writerows(updated_rows)
        
        print(f"\n–î–∞–Ω–Ω—ã–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π 'Language' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ '{output_file}'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"\n–ü—Ä–∏–º–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞:")
        with open(output_file, 'r', encoding='utf-8-sig') as f:
            reader = csv.reader(f)
            header = next(reader)
            
            print(f"–ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π:")
            for i, row in enumerate(reader):
                if i < 10 and len(row) >= 4:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                    title = row[0][:40] + "..." if len(row[0]) > 40 else row[0]
                    channel = row[1]
                    language = row[3]  # –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ Language
                    print(f"  {title} | {channel} | {language}")
                elif i >= 10:
                    break
                    
    except FileNotFoundError:
        print(f"\n–û–®–ò–ë–ö–ê: –§–∞–π–ª '{input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ remove_duplicates.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞.")
        return
        
    except Exception as e:
        print(f"\n–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

def test_language_detection():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö.
    """
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ ===")
    
    test_cases = [
        "How AI Coding Agents Will Change Your Job",
        "–Ø–Ω –ó—É–±–∫–æ–≤ ¬´–ß–ï–†–ù–´–ô –°–¢–ï–ù–î–ê–ü¬ª",
        "The Mental Health AI Chatbot Made for Real Life",
        "–ì–ª–∞–≤–Ω–∞—è –ó–∞–≥–∞–¥–∫–∞ –í—Ç–æ—Ä–æ–π –ú–∏—Ä–æ–≤–æ–π.",
        "I/O '25 in under 10 minutes",
        "–ü–æ—á–µ–º—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ –∏ –æ–ø–∞—Å–Ω–æ?",
        "Franz Hermann is back ü§£",
        "–ò–º–æ–ª–∞ 2025 –û–±–∑–æ—Ä –≥–æ–Ω–∫–∏"
    ]
    
    for test_text in test_cases:
        language = detect_language(test_text)
        print(f"'{test_text}' -> {language}")
    
    print()

if __name__ == "__main__":
    print("=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'Language' –≤ –∏—Å—Ç–æ—Ä–∏—é YouTube ===\n")
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    test_language_detection()
    
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    add_language_column() 