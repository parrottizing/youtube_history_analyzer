import csv
from collections import defaultdict
import re

def parse_duration(duration_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.
    
    Args:
        duration_str (str): –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "12:34" –∏–ª–∏ "1:23:45"
        
    Returns:
        int: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    """
    try:
        parts = duration_str.strip().split(':')
        if len(parts) == 2:  # MM:SS
            minutes, seconds = map(int, parts)
            return minutes * 60 + seconds
        elif len(parts) == 3:  # HH:MM:SS
            hours, minutes, seconds = map(int, parts)
            return hours * 3600 + minutes * 60 + seconds
        else:
            return 0
    except:
        return 0

def format_duration(total_seconds):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        total_seconds (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    """
    if total_seconds == 0:
        return "0:00"
    
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    
    if hours > 0:
        return f"{hours}:{minutes:02d}:{seconds:02d}"
    else:
        return f"{minutes}:{seconds:02d}"

def analyze_channels(input_file='youtube_history_with_language.csv'):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é YouTube –ø–æ –∫–∞–Ω–∞–ª–∞–º.
    
    Args:
        input_file (str): –ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ.
    """
    print(f"–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{input_file}'...")
    
    try:
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channels_data = defaultdict(lambda: {
            'videos': [],
            'total_duration': 0,
            'languages': set(),
            'video_count': 0
        })
        
        with open(input_file, 'r', encoding='utf-8-sig') as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                channel = row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'].strip()
                video_title = row['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ'].strip()
                duration_str = row['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ'].strip()
                language = row['Language'].strip()
                
                # –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                duration_seconds = parse_duration(duration_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –∫–∞–Ω–∞–ª—É
                channels_data[channel]['videos'].append({
                    'title': video_title,
                    'duration': duration_str,
                    'duration_seconds': duration_seconds,
                    'language': language
                })
                channels_data[channel]['total_duration'] += duration_seconds
                channels_data[channel]['languages'].add(language)
                channels_data[channel]['video_count'] += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_channels = sorted(channels_data.items(), 
                               key=lambda x: x[1]['video_count'], 
                               reverse=True)
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(sorted_channels)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        print("=" * 80)
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø –∫–∞–Ω–∞–ª–æ–≤
        print("\nüìä –¢–û–ü –ö–ê–ù–ê–õ–û–í –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ü–†–û–°–ú–û–¢–†–ï–ù–ù–´–• –í–ò–î–ï–û:")
        print("-" * 80)
        
        total_videos = sum(data['video_count'] for _, data in sorted_channels)
        total_watch_time = sum(data['total_duration'] for _, data in sorted_channels)
        
        for i, (channel, data) in enumerate(sorted_channels[:10], 1):
            percentage = (data['video_count'] / total_videos) * 100
            languages_str = ', '.join(sorted(data['languages']))
            
            print(f"{i:2d}. {channel}")
            print(f"    üìπ –í–∏–¥–µ–æ: {data['video_count']} ({percentage:.1f}%)")
            print(f"    ‚è±Ô∏è  –í—Ä–µ–º—è: {format_duration(data['total_duration'])}")
            print(f"    üåê –Ø–∑—ã–∫–∏: {languages_str}")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ CSV
        output_file = 'channel_analysis.csv'
        with open(output_file, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)
            writer.writerow([
                '–ö–∞–Ω–∞–ª', 
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ', 
                '–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', 
                '–û–±—â–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)',
                '–Ø–∑—ã–∫–∏',
                '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ'
            ])
            
            for channel, data in sorted_channels:
                percentage = (data['video_count'] / total_videos) * 100
                languages_str = ', '.join(sorted(data['languages']))
                
                writer.writerow([
                    channel,
                    data['video_count'],
                    format_duration(data['total_duration']),
                    data['total_duration'],
                    languages_str,
                    f"{percentage:.1f}%"
                ])
        
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ '{output_file}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        detailed_file = 'videos_by_channel.csv'
        with open(detailed_file, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)
            writer.writerow([
                '–ö–∞–Ω–∞–ª', 
                '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ', 
                '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 
                '–Ø–∑—ã–∫'
            ])
            
            for channel, data in sorted_channels:
                for video in data['videos']:
                    writer.writerow([
                        channel,
                        video['title'],
                        video['duration'],
                        video['language']
                    ])
        
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ '{detailed_file}'")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 40)
        print(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(sorted_channels)}")
        print(f"–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {total_videos}")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {format_duration(total_watch_time)}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —è–∑—ã–∫–∞–º
        language_stats = defaultdict(lambda: {'channels': set(), 'videos': 0, 'time': 0})
        for channel, data in sorted_channels:
            for video in data['videos']:
                lang = video['language']
                language_stats[lang]['channels'].add(channel)
                language_stats[lang]['videos'] += 1
                language_stats[lang]['time'] += video['duration_seconds']
        
        print(f"\nüåê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –Ø–ó–´–ö–ê–ú:")
        print("-" * 40)
        for lang, stats in language_stats.items():
            print(f"{lang}:")
            print(f"  üìπ –í–∏–¥–µ–æ: {stats['videos']}")
            print(f"  üì∫ –ö–∞–Ω–∞–ª—ã: {len(stats['channels'])}")
            print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è: {format_duration(stats['time'])}")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        print(f"\n‚è∞ –¢–û–ü –ö–ê–ù–ê–õ–û–í –ü–û –í–†–ï–ú–ï–ù–ò –ü–†–û–°–ú–û–¢–†–ê:")
        print("-" * 50)
        sorted_by_time = sorted(channels_data.items(), 
                              key=lambda x: x[1]['total_duration'], 
                              reverse=True)
        
        for i, (channel, data) in enumerate(sorted_by_time[:5], 1):
            time_percentage = (data['total_duration'] / total_watch_time) * 100
            print(f"{i}. {channel}")
            print(f"   ‚è±Ô∏è  {format_duration(data['total_duration'])} ({time_percentage:.1f}%)")
            print(f"   üìπ {data['video_count']} –≤–∏–¥–µ–æ")
            print()
            
    except FileNotFoundError:
        print(f"\n–û–®–ò–ë–ö–ê: –§–∞–π–ª '{input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ add_language_column.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —è–∑—ã–∫–∞–º–∏.")
        return
        
    except Exception as e:
        print(f"\n–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

if __name__ == "__main__":
    print("=== –ê–Ω–∞–ª–∏–∑ YouTube –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º ===\n")
    analyze_channels() 